SpringAOP
XML:
接口设计: Advice，PointCut，Advisor
1.PointCut(定义如何匹配):该接口定义了两个方法ClassFilter getClassFilter() 和 MethodMatcher getMethodMatcher()
            第一个方法返回一个类过滤器，由于一个类可能被多个代理类代理，所以引进责任链模式
            第二个方法返回一个方法匹配器，通过规则匹配方法是否需要增强
            MethodMatcher接口定义了静态方法匹配器和动态方法匹配器
2.Advice(定义在PointCut处应该做些什么):该接口只是一个标示，但是我们常用的几个接口，比如 BeforeAdvice，AfterAdvice，都是继承自它

接下来，我们可以停下来思考一下，现在有了这个东西，我们怎么实现面向切面编程
1. 首先我们需要告诉AOP在哪里进行切面。比如在某个类的方法前后进行切面。
2. 告诉AOP 切面之后做什么，也就是说，我们知道了在哪里进行切面，那么我们也该让spring知道在切点处做什么。
3. 我们知道，Spring AOP 的底层实现是动态代理（不管是JDK还是Cglib），那么就需要一个代理对象，那么如何生成呢？

我们可以通过实现PointCut接口来指定切面点，实现AbstractApplicationContext来指定增强操作，实现PointcutAdvisor配置目标类
XML 配置的AOP是使用 ProxyFactoryBean 来进行动态代理的

注解:
ProxyCreatorSupport 类有三个子类 ProxyFactoryBean,AspectJProxyFactory,ProxyFactory
其中就有一个我们熟悉的 ProxyFactoryBean，该类实现了我们熟悉的 FactoryBean，还有一个可以获取容器内Bean的 BeanFactoyAware 接口，第二
个是陌生的 AspectJProxyFactory 类，该类是用于集成 Spring 和 AspectJ 的。而最后一个类ProxyFactory 就是我们今天的主角，Spring 的类注
释说：用于编程使用的AOP代理，而不是在bean工厂中通过声明式设置。这个类提供了一种简单的方法，可以在定制的用户代码中获取和配置AOP代理实例，
大概意思就是通过编程的方式获取Bean 代理吧，而不是通过配置文件的方式。我们今天就可以见识到

AnnotationAwareAspectJAutoProxyCreator类：最底层的该类实现了 BeanPostProcessor 接口，可以在每个bena生成前后做操作。注释上是这么说
的：任何AspectJ注释的类都将自动被识别，它们也会被识别，我们知道了 AnnotationAwareAspectJAutoProxyCreator 是根据注解自动创建代理，而
该类也算是 ProxyBean 的代理

注解方式和 XML 配置方式的底层实现都是一样的，都是通过继承 ProxyCreatorSupport 来实现的，不同的通过扩展不同的 Spring 提供的接口，XML
扩展的是FactoryBean 接口， 而注解方式扩展的是 BenaPostProcessor 接口，通过Spring 的扩展接口，能够对特定的Bean进行增强。而 AOP 正式
通过这种方式实现的。这也提醒了我们，我们也可以通过扩展 Spring 的某些接口来增强我们需要的 Bean 的某些功能

SpringBoot Aop原理
AOP的核心就是代理，通知器，切点
1. AnnotationAwareAspectJAutoProxyCreator 后置处理器注册过程。
2. 标注 @Aspect 注解的 bean 的后置处理器的处理过程
3. 创建代理的过程
4. 目标对象方法调用的过程